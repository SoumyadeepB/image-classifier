{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","img","setImg","res","setRes","show","setShow","loading","setLoading","disabled","classifyImg","a","mobilenet","net","document","getElementById","classify","result","className","active","spinner","text","Container","style","minHeight","minWidth","Row","Col","xs","lg","width","height","border","Image","src","id","type","accept","name","onChange","e","reader","FileReader","onload","readyState","readAsDataURL","target","files","Button","variant","size","onClick","margin","map","probability","ProgressBar","key","now","toFixed","label","position","bottom","right","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.192a750d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Image,\n  ProgressBar,\n  Spinner,\n} from \"react-bootstrap\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport \"./App.css\";\n\nfunction App() {\n  const [img, setImg] = useState(\"None\");\n  const [res, setRes] = useState(0);\n  const [show, setShow] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisable] = useState(false);\n\n  const imageHandler = (e) => {\n    setShow(false);\n    var i = 1\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setImg(reader.result);\n      }\n    };\n\n    reader.readAsDataURL(e.target.files[0]);\n    /* var valid = reader.result.match(/jpg|jpeg|png|gif/gi)\n     if (!valid && reader.result) {\n       setDisable(false);\n     }\n     else {\n       if (reader.result)\n         alert(\"Not an image\");\n     }*/\n  };\n\n  const classifyImg = async () => {\n    // Initialize the Image Classifier method with MobileNet\n    setLoading(true);\n    const net = await mobilenet.load();\n    const img = document.getElementById(\"img\");\n    const result = await net.classify(img);\n    setRes(result);\n    setLoading(false);\n    setShow(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <LoadingOverlay active={loading} spinner text=\"Generating predictions...\">\n        <Container style={{ minHeight: \"100vh\", minWidth: \"100vw\" }}>\n          <Row className=\"center\">\n            <h1>Image Classifier </h1>\n          </Row>\n          <Row>\n            <Col xs=\"12\" lg=\"6\" className=\"colLeft\">\n              <Row className=\"center\">\n                {img === \"None\" ? (\n                  <ImageIcon\n                    className=\"responsiveImg\"\n                    style={{\n                      width: \"400px\",\n                      height: \"400px\",\n                      border: \"2px solid\",\n                    }}\n                  />\n                ) : (\n                    <Image src={img} id=\"img\" className=\"responsiveImg\" />\n                  )}\n              </Row>\n              <br />\n              <Row>\n                <Col xs=\"12\" lg=\"9\">\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    name=\"image-upload\"\n                    id=\"input\"\n                    onChange={imageHandler}\n                    className=\"fileInput\"\n                  />\n                </Col>\n\n                <Col xs=\"12\" lg=\"3\">\n                  <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={classifyImg}\n                    style={{ margin: \"3px\" }}\n                    disabled={disabled}\n                  >\n                    Classify\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n\n            <Col xs=\"12\" lg=\"6\">\n              {show && (\n                <div className=\"classification\">\n                  <h3 className=\"center\">Class predictions</h3>\n                  <ul>\n                    {res.map(({ className, probability }) => (\n                      <div className=\"bar\">\n                        <ProgressBar\n                          key={className}\n                          variant=\"success\"\n                          now={(probability * 100).toFixed(2)}\n                          label={``}\n                          style={{ height: \"20px !important\" }}\n                        />\n                        <h4>{`${className} (${(probability * 100).toFixed(\n                          2\n                        )}%)`}</h4>\n                      </div>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <Row>\n                <Col xs=\"8\"></Col>\n                <Col\n                  xs=\"3\"\n                  style={{ position: \"fixed\", bottom: \"10px\", right: \"-5%\" }}\n                >\n                  <img src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fsoumyadeepb.github.io%2Fimage-classifier%2F&count_bg=%2379C83D&title_bg=%23130F0F&icon=&icon_color=%23F3F3F3&title=Visitors&edge_flat=false\" />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </LoadingOverlay>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}