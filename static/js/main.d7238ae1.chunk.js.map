{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","img","setImg","a","mobilenet","net","window","alert","console","log","document","getElementById","classify","result","className","Container","style","minHeight","minWidth","Row","fontSize","width","height","Image","src","id","variant","type","accept","name","onChange","e","reader","FileReader","onload","readyState","readAsDataURL","target","files","Button","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0aAwEeA,MAhEf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,gCAGSA,mBAAS,SAHlB,mBAGNC,EAHM,KAGDC,EAHC,iDAiBb,gCAAAC,EAAA,sEAGoBC,MAHpB,cAGQC,EAHR,OAIEC,OAAOC,MAAM,iBACbC,QAAQC,IAAI,iBACNR,EAAMS,SAASC,eAAe,OANtC,SAOuBN,EAAIO,SAASX,GAPpC,OAOQY,EAPR,OAQEP,OAAOC,MAAM,SACbC,QAAQC,IAAII,GATd,6CAjBa,sBA8Bb,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,OAAQC,SAAU,SAC/C,kBAACC,EAAA,EAAD,CAAKL,UAAU,UACb,mDAEF,kBAACK,EAAA,EAAD,CAAKL,UAAU,UACJ,SAARb,EACC,kBAAC,IAAD,aAAWe,MAAO,CAAEI,SAAU,QAA9B,QAA8C,CAAEC,MAAO,QAASC,OAAQ,WAEtE,kBAACC,EAAA,EAAD,aAAOC,IAAKvB,EAAKwB,GAAG,MAAMX,UAAU,MAAME,MAAO,CAAEI,SAAU,QAA7D,QAA6E,CAAEC,MAAO,QAASC,OAAQ,YAI7G,kBAACH,EAAA,EAAD,CAAKL,UAAU,UACb,2BACEY,QAAQ,UACRC,KAAK,OACLC,OAAO,UACPC,KAAK,eACLJ,GAAG,QACHK,SA7CW,SAACC,GACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACY,IAAtBF,EAAOG,YACTjC,EAAO8B,EAAOnB,SAGlBmB,EAAOI,cAAcL,EAAEM,OAAOC,MAAM,QA0ChC,kBAACnB,EAAA,EAAD,CAAKL,UAAU,UACb,kBAACyB,EAAA,EAAD,CAAQb,QAAQ,UAAUc,QAxDrB,4CAwDL,gBCpDUC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDwHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.d7238ae1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Row, Col, Button, Image, ProgressBar } from \"react-bootstrap\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport \"./App.css\";\n\n\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n  const [img, setImg] = useState(\"None\")\n\n\n  const imageHandler = (e) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setImg(reader.result);\n      }\n    };\n    reader.readAsDataURL(e.target.files[0]);\n  };\n\n\n  async function classifyImg() {\n    // Initialize the Image Classifier method with MobileNet\n\n    const net = await mobilenet.load();\n    window.alert(\"Model Loaded!\");\n    console.log(\"Model Loaded!\");\n    const img = document.getElementById('img');\n    const result = await net.classify(img);\n    window.alert(\"Done!\");\n    console.log(result);\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Container style={{ minHeight: \"90vh\", minWidth: \"96vw\" }}>\n        <Row className=\"center\">\n          <h6>Upload an image...</h6>\n        </Row>\n        <Row className=\"center\" >\n          {img === \"None\" ? (\n            <ImageIcon style={{ fontSize: \"9em\" }} style={{ width: \"240px\", height: \"240px\" }} />\n          ) : (\n              <Image src={img} id=\"img\" className=\"img\" style={{ fontSize: \"1em\" }} style={{ width: \"400px\", height: \"300px\" }} />\n            )}\n        </Row>\n\n        <Row className=\"center\">\n          <input\n            variant=\"primary\"\n            type=\"file\"\n            accept=\"image/*\"\n            name=\"image-upload\"\n            id=\"input\"\n            onChange={imageHandler}\n          />\n        </Row>\n\n        <Row className=\"center\">\n          <Button variant=\"primary\" onClick={classifyImg}>Classify</Button>\n        </Row>\n\n      </Container>\n    </div>\n  );\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}